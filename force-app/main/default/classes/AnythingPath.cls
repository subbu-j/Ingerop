public class AnythingPath {

    @AuraEnabled
    public static string query(String soql) {
        return JSON.serialize(Database.query(soql));
    }

    @AuraEnabled
    public static void updateField(id recordId, string Field, string newValue){
        system.debug(' in the update function');
        Schema.SObjectType sobjectType = recordId.getSObjectType();
        String sobjectName = sobjectType.getDescribe().getName();

        SObject record = Database.query('Select Id, ' + Field + ' From ' + sobjectName + ' Where Id = \'' + recordId + '\'');
        record.put(Field, newValue);
        update record;
    }

    //returns the object itself with the correct fields
    @AuraEnabled
    public static string getCurrentValue(string recordId, string picklistField, string sObjectName){
        string soql = 'select Id, ' + picklistField + ' from ' + SobjectName + ' where id = \'' + recordId + '\'';
        list<sobject> records = Database.query(soql);
        return (string)records[0].get(picklistField);
    }
    
    //updates the record
    @AuraEnabled
    public static void setNewValue(string recordId, string picklistField, string newValue){
        sobject o1 = id.valueOf(recordId).getSobjectType().newSobject(id.valueOf(recordId));
        o1.put(picklistField, newValue);
        update o1;       
    }

    //returns the picklist options as a list of (value, label)
    @AuraEnabled
    public static map<String, string> getPicklistOptions(string recordId, string picklistField, string sObjectName){
        map<string, string> output = new map<string, string>();
        Schema.sobjectType objType;

        //what an ugly hack this is, in the name of reusability!
        if (recordId == null){
            string query = 'Select Id from ' + sObjectName + ' limit 1';
            system.debug(query);
            list<sobject> example = Database.query(query);
            recordId = string.valueOf(example[0].get('Id'));
        } 

        objType = Id.valueOf(recordId).getSobjectType();            
        Schema.DescribeSObjectResult dsr  = objType.getDescribe();
        map<string, Schema.SObjectField> fieldMap = dsr.fields.getMap();
        Schema.DescribeFieldResult dfr = fieldmap.get(picklistField).getDescribe();
        list<Schema.PicklistEntry> results = dfr.getPicklistValues();
            
        for (Schema.PicklistEntry pe:results){
            if (pe.isActive()) output.put(pe.getValue(), pe.getLabel());
        }
        return output;
    }


    //for using the streaming API
    //returns the topic name for this component, creating it if necessary
    @AuraEnabled
    public static String dynamicTopic(String WhichObject, String Field) {

        string DynamicQuery = 'Select Id, ' + Field + ' from ' + WhichObject;

        //does it exist?
        List<Pushtopic> topicList = [SELECT Id, ApiVersion, Name, Description, Query FROM Pushtopic WHERE Query = :DynamicQuery];

        if (topicList.isEmpty()) {
            PushTopic newTopic = new PushTopic();
            newTopic.ApiVersion = 36.0;
            newTopic.Name = (WhichObject+Field).left(25);
            newTopic.Description = 'Autogenerated by AnythingPath Component';
            newTopic.Query = DynamicQuery;
            try {
                insert newTopic;
                return newTopic.Name;
            } catch (DMLException e) {
                System.debug(e);
                return e.getMessage();
            }
        } else {
            return topicList[0].Name;            
        }
    }
}